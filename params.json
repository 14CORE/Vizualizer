{"name":"Vizualizer","tagline":"Vizualizer.js","body":"# Vizualizer.js\r\n\r\nVizualizer.js is a small javascript library to simplify the creation of audio visualisation in the web browser. It uses the Web Audio API and Page Visibility API. The visualisaton is not rendered if the page is not visible.\r\n\r\n## Documentation\r\n\r\nDocumentation available [here](http://ffloriel.github.io/Vizualizer/documentation/).\r\n\r\n## Demo\r\n\r\nYou can found a demo of the vizualizer [here](http://ffloriel.github.io/Vizualizer/demo/).\r\n\r\n## Usage\r\n\r\n```html\r\n<audio src=\"audio.mp3\" id=\"audio\" controls></audio>\r\n<script src=\"vizualizer.min.js\"></script>\r\n```\r\n### Create a vizualizer\r\n```javascript\r\n//With Element\r\nvar el = document.getElementById(\"audio\");\r\nvar vizualizerElement = Vizualizer.withElement(el);\r\n\r\n//With an url to the media (an audio element is created)\r\nvar url = \"audio.mp3\";\r\nvar vizualizerMedia = Vizualizer.withMedia(url);\r\n```\r\n```javascript\r\n//With Array Buffer from FileReader API\r\nloadAudio(files) {\r\n        var file = files[0];\r\n        var audioType = /^audio\\//;\r\n        if (audioType.test(file.type)) {\r\n            let reader = new FileReader();\r\n            reader.onload = function (e) {\r\n                vizualizer = Vizualizer.withArrayBuffer(e.target.result);\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n    }\r\n```\r\n\r\n### Add, remove and change an effect\r\n```javascript\r\nvar vizualizer = vizualizer = Vizualizer.withElement(el);\r\nvar effect = new CirclesEffect(5, 75, 0.4);\r\nvar otherEffect = new CirclesEffect(3, 100, 0.5);\r\n//Add the effect\r\nvizualizer.addEffect(effect);   //Add effect in an array\r\n//change Effect\r\nvizualizer.changeEffect(otherEffect, 0);    //First Effect add -> index 0\r\n//Remove the effect\r\nvizualizer.removeEffect(0);\r\nvizualizer.stop();\r\n```\r\n### Start and Stop the visualisation\r\n```javascript\r\nvar vizualizer = vizualizer = Vizualizer.withElement(el);\r\nvizualizer.start();\r\nvizualizer.stop();\r\n```\r\n\r\n### Create an effect\r\n\r\nTo create an effect, you have to create a class extending *EffectVizualizer* and implement the 3 following functions:\r\n* hide()\r\n* show()\r\n* renderEffect(dataArray) called each frame\r\n\r\nExample in ES6 with d3.js :\r\n```javascript\r\nclass CirclesEffect extends EffectVizualizer {\r\n    constructor(nbCircle, radius, acceleration) {\r\n        super();\r\n        this.nbCircle = nbCircle;\r\n        this.radius = radius;\r\n        this.acceleration = acceleration;\r\n        this.color = \"#fff\";\r\n        this.opacity = 0.7;\r\n        this.fill = \"none\";\r\n    }\r\n    \r\n    create(svg, width, height, dataArray) {\r\n        let i = 0;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.circles = [];\r\n        \r\n        for (i; i < this.nbCircle; i += 1) {\r\n            this.circles[i] = svg.append(\"circle\")\r\n                .data(dataArray)\r\n                .attr(\"cx\", width / 2)\r\n                .attr(\"cy\", height / 2)\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"stroke\", this.color)\r\n                .attr(\"fill\", this.fill)\r\n                .attr(\"opacity\", this.opacity);\r\n        }\r\n    }\r\n    \r\n    renderEffect(dataArray) {\r\n        let r;\r\n        let i = 0;\r\n        for (i; i < this.nbCircle; i += 1) {\r\n            r = this.radius + d3.mean(dataArray) * (this.acceleration + i * 0.1) * this.height / 255;\r\n            this.circles[i].data(dataArray)\r\n                .attr(\"r\", r);\r\n        }\r\n    }\r\n    \r\n    hide() {\r\n        let i = 0;\r\n        for (i; i < this.nbCircle; i += 1) {\r\n            this.circles[i].attr(\"opacity\", 0);\r\n        }\r\n    }\r\n    \r\n    show() {\r\n        let i = 0;\r\n        for (i; i < this.nbCircle; i += 1) {\r\n            this.circles[i].attr(\"opacity\", this.opacity);\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}